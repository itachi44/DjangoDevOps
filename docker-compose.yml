version: "3.9"
services:
  db:
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_PROD_HOST: ${DATABASE_PROD_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
      ENV_MODE: ${ENV_MODE} 
    container_name: postgres
    restart: always
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - dj-network
    healthcheck :
      test: [ "CMD", "pg_isready", "-q", "-d", "usersdb", "-U", "djuser" ]
      interval : 5s
      timeout : 5s
      retries : 5


  web-app:
    build: 
      context: .
      dockerfile: ./Dockerfile
    container_name: web-app
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_PROD_HOST: ${DATABASE_PROD_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
      ENV_MODE: ${ENV_MODE} 
    volumes:
      - static_files:/home/app/webapp/static
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    restart: always
    networks:
      - dj-network

volumes:
  pgdata:
  static_files:

networks:
  dj-network:
